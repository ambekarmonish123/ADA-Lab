#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

int binarySearch(int arr[], int l, int r, int x)
{
	if (r >= l) {
		int mid = l + (r - l) / 2;
		if (arr[mid] == x)
			return mid;
		if (arr[mid] > x)
			return binarySearch(arr, l, mid - 1, x);
		return binarySearch(arr, mid + 1, r, x);
	}
	return -1;
}

int linearSearch(int arr[], int l, int n, int x)
{
	if (l <= n) {
		if (arr[l] == x)
			return l;
		return linearSearch(arr, l + 1, n, x);
	}
	return -1;
}

int main(void)
{
	int n,i,key,j,k;
    float start,end;
	printf("Enter the number of elements\n");
    scanf("%d",&n);
    int arr[n];
    printf("Enter 1 for linear search and 2 for binary search\n");
    scanf("%d",&k);
    if(k==1)
    {
        for(i=0;i<n;i++)
            arr[i]=rand();
        for(i=0;i<n;i++)
            printf("%d ",arr[i]);
        printf("Enter the element to search\n");
        scanf("%d",&key);
        start=clock();
	    int result = linearSearch(arr, 0, n - 1, key);
        end=clock();
        if(result==-1)
            printf("Element is not present in array");
        else
            printf("Element is present at index %d",result);
        printf("\n Time taken to sort %d numbers is %f Secs",n, (((double)(end-start))/CLOCKS_PER_SEC));
    }
    else
    {
        for(i=0;i<n;i++)
            arr[i]=rand();
        for (i = 0; i <n-1; i++)      
        {
            for (j =0; j <n-i-1; j++) 
                if (arr[j] > arr[j+1])
                    swap(&arr[j], &arr[j+1]);
        }            
        for(i=0;i<n;i++)
            printf("%d ",arr[i]);
        printf("Enter the element to search\n");
        scanf("%d",&key);
        start=clock();
	    int result = binarySearch(arr, 0, n - 1, key);
        end=clock();
        if(result==-1)
            printf("Element is not present in array");
        else
            printf("Element is present at index %d",result);
        printf("\n Time taken to sort %d numbers is %f Secs",n, (((double)(end-start))/CLOCKS_PER_SEC));
    }
	return 0;
}
